{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'bounds': 1,\n",
      " 'member': 23942,\n",
      " 'meta': 1,\n",
      " 'nd': 668786,\n",
      " 'node': 556381,\n",
      " 'note': 1,\n",
      " 'osm': 1,\n",
      " 'relation': 569,\n",
      " 'tag': 210698,\n",
      " 'way': 65070}\n"
     ]
    }
   ],
   "source": [
    "#https://classroom.udacity.com/courses/ud032/lessons/768058569/concepts/8443086480923\n",
    "#!/usr/bin/env python\n",
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Your task is to use the iterative parsing to process the map file and\n",
    "find out not only what tags are there, but also how many, to get the\n",
    "feeling on how much of which data you can expect to have in the map.\n",
    "Fill out the count_tags function. It should return a dictionary with the \n",
    "tag name as the key and number of times this tag can be encountered in \n",
    "the map as value.\n",
    "\n",
    "Note that your code will be tested with a different data file than the 'example.osm'\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "#Downloaded OSM file, using ElementTree to parse through it\n",
    "import xml.etree.ElementTree as ET  \n",
    "import pprint\n",
    "inputfile = 'sample.xml'\n",
    "tags = {}\n",
    "#Count number# of element Types\n",
    "def count_tags(inputfile):\n",
    "    #Reads XML file: sample.xml and count each XML tag within the document\n",
    "    \n",
    "    for _, elemt in ET.iterparse(inputfile):\n",
    "        tag = elemt.tag\n",
    "        if tag not in tags:\n",
    "            tags[tag] = 1\n",
    "        else:\n",
    "            tags[tag] += 1\n",
    "    #returns a Dictionary consist of tag_names:(counts as values)\n",
    "        \n",
    "    return tags    \n",
    "\n",
    "pprint.pprint(count_tags(inputfile))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of unique users: 797\n"
     ]
    }
   ],
   "source": [
    "#identifying unique users contribute the to the map area: Melbouren, FL. \n",
    "\"\"\"\n",
    "Your task is to explore the data a bit more.\n",
    "The first task is a fun one - find out how many unique users\n",
    "have contributed to the map in this particular area!\n",
    "\n",
    "The function process_map should return a set of unique user IDs (\"uid\")\n",
    "\"\"\"\n",
    "\n",
    "def process_map(inputfile):  \n",
    "    users = set()\n",
    "    for _, element in ET.iterparse(inputfile):\n",
    "        for e in element:\n",
    "            if 'uid' in e.attrib:\n",
    "                users.add(e.attrib['uid'])\n",
    "\n",
    "    return users\n",
    "#the function process_map return a set of unique user \"uid\"\n",
    "users = process_map(inputfile)  \n",
    "print('Number of unique users:', len(users)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'lower_case': 140764, 'lower_colon': 66274, 'other': 3660, 'prob_chars': 0}\n"
     ]
    }
   ],
   "source": [
    "#https://classroom.udacity.com/courses/ud032/lessons/768058569/concepts/8402186170923\n",
    "\"\"\"\n",
    "Your task is to explore the data a bit more.\n",
    "Before you process the data and add it into your database, you should check the\n",
    "\"k\" value for each \"<tag>\" and see if there are any potential problems.\n",
    "\n",
    "We have provided you with 3 regular expressions to check for certain patterns\n",
    "in the tags. As we saw in the quiz earlier, we would like to change the data\n",
    "model and expand the \"addr:street\" type of keys to a dictionary like this:\n",
    "{\"address\": {\"street\": \"Some value\"}}\n",
    "So, we have to see if we have such tags, and if we have any tags with\n",
    "problematic characters.\n",
    "\n",
    "Please complete the function 'key_type', such that we have a count of each of\n",
    "four tag categories in a dictionary:\n",
    "  \"lower\", for tags that contain only lowercase letters and are valid,\n",
    "  \"lower_colon\", for otherwise valid tags with a colon in their names,\n",
    "  \"problemchars\", for tags with problematic characters, and\n",
    "  \"other\", for other tags that do not fall into the other three categories.\n",
    "See the 'process_map' and 'test' functions for examples of the expected format.\n",
    "\"\"\"\n",
    "\n",
    "import re\n",
    "\n",
    "lower_case = re.compile(r'^([a-z]|_)*$')  \n",
    "lower_colon = re.compile(r'^([a-z]|_)*:([a-z]|_)*$')  \n",
    "prob_chars = re.compile(r'[=\\+/&<>;\\'\"\\?%#$@\\,\\. \\t\\r\\n]')\n",
    "\n",
    "def key_type(element, keys):\n",
    "    #tag's attribute matches a regular express and counts # tags.\n",
    "    if element.tag == \"tag\":\n",
    "        if prob_chars.search(element.attrib['k']):\n",
    "            keys['prob_chars'] +=1\n",
    "            #print element.attrib['k']\n",
    "        elif lower_colon.search(element.attrib['k']):\n",
    "            keys['lower_colon'] +=1\n",
    "        elif lower_case.search(element.attrib['k']):\n",
    "            keys['lower_case'] +=1    \n",
    "        else: \n",
    "            keys['other'] +=1\n",
    "        \n",
    "        \n",
    "    return keys\n",
    "   \n",
    "\n",
    "def process_map(inputfile):  \n",
    "    keys = {\"lower_case\": 0, \"lower_colon\": 0, \"prob_chars\": 0, \"other\": 0}\n",
    "    # Iterates through an XML file and create a Dict of keys/count.\n",
    "\n",
    "    for _, element in ET.iterparse(inputfile):\n",
    "        keys = key_type(element, keys)\n",
    "\n",
    "    return keys\n",
    "\n",
    "keys = process_map(inputfile)  \n",
    "pprint.pprint(keys)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Interstate Court Southeast => Interstate Court Southeast\n",
      "Community College Parkway Southeast => Community College Parkway Southeast\n",
      "Malabar Road Southeast => Malabar Road Southeast\n",
      "Monument Avenue Southeast => Monument Avenue Southeast\n",
      "Treeland Boulevard Southeast => Treeland Boulevard Southeast\n",
      "Babcock Street Southeast => Babcock Street Southeast\n",
      "Foundation Park Boulevard Southeast => Foundation Park Boulevard Southeast\n",
      "Jupiter Boulevard Southeast => Jupiter Boulevard Southeast\n",
      "Holiday Park Boulevard Northeast => Holiday Park Boulevard Northeast\n",
      "Malabar Road Northeast => Malabar Road Northeast\n",
      "Interchange Drive Northeast => Interchange Drive Northeast\n",
      "Certosa Avenue Northeast => Certosa Avenue Northeast\n",
      "Crestline Lane Northeast => Crestline Lane Northeast\n",
      "Georgia Street Northeast => Georgia Street Northeast\n",
      "Ring Avenue Northeast => Ring Avenue Northeast\n",
      "Concord Street Northeast => Concord Street Northeast\n",
      "Bordeaux Avenue Northeast => Bordeaux Avenue Northeast\n",
      "Babcock Street Northeast => Babcock Street Northeast\n",
      "Culver Drive Northeast => Culver Drive Northeast\n",
      "Main Street Northeast => Main Street Northeast\n",
      "Emerson Drive Northeast => Emerson Drive Northeast\n",
      "Palm Bay Road Northeast => Palm Bay Road Northeast\n",
      "Woodlake Drive Northeast => Woodlake Drive Northeast\n",
      "Fairhaven Street Northeast => Fairhaven Street Northeast\n",
      "Sarno Rd => Sarno Road\n",
      "Spyglass Hill Rd => Spyglass Hill Road\n",
      "S Wickham Rd => S Wickham Road\n",
      "Post Rd => Post Road\n",
      "N Wickham Rd => N Wickham Road\n",
      "W New Haven Ave => W New Haven Avenue\n",
      "East Strawbridge Ave => East Strawbridge Avenue\n",
      "East New Haven Ave => East New Haven Avenue\n",
      "Pineapple Ave => Pineapple Avenue\n",
      "Colonnade Ave => Colonnade Avenue\n",
      "Burdock Ave => Burdock Avenue\n",
      "Town Center Ave => Town Center Avenue\n",
      "Fire Fall Ln => Fire Fall Lane\n",
      "Breeze Ln => Breeze Lane\n",
      "Steeplechase Ln => Steeplechase Lane\n",
      "Rhonda Ln => Rhonda Lane\n",
      "Bogey Ln => Bogey Lane\n",
      "Sand Trap Ln => Sand Trap Lane\n",
      "Hampton Park Ln => Hampton Park Lane\n",
      "Sanddune Ln => Sanddune Lane\n",
      "Patty Ln => Patty Lane\n",
      "Mollie Ln => Mollie Lane\n",
      "Oakwood Dr => Oakwood Drive\n",
      "S Patrick Dr => S Patrick Drive\n",
      "Merion Dr => Merion Drive\n",
      "Cozumel Dr => Cozumel Drive\n",
      "Summerset Dr => Summerset Drive\n",
      "Lamplighter Dr => Lamplighter Drive\n",
      "College Wood Dr => College Wood Drive\n",
      "Ridge Club Dr => Ridge Club Drive\n",
      "Lake Crest Dr => Lake Crest Drive\n",
      "Rivercrest Dr => Rivercrest Drive\n",
      "Rushing Waters Dr => Rushing Waters Drive\n",
      "E Riverside Dr => E Riverside Drive\n",
      "Central Park Dr => Central Park Drive\n",
      "Croftwood Dr => Croftwood Drive\n",
      "Glenwood Dr => Glenwood Drive\n",
      "Eagle Dr => Eagle Drive\n",
      "June Dr => June Drive\n",
      "Plantation Club Dr => Plantation Club Drive\n",
      "Eden Park Dr => Eden Park Drive\n",
      "Hidden Harbour Dr => Hidden Harbour Drive\n",
      "Distribution Dr => Distribution Drive\n",
      "Forest Park Dr => Forest Park Drive\n",
      "Regency Dr => Regency Drive\n",
      "Equinox Dr => Equinox Drive\n",
      "Thrush Dr => Thrush Drive\n",
      "Flower Tree Cir => Flower Tree Circle\n",
      "Golf Lake Cir => Golf Lake Circle\n",
      "San Juan Cir => San Juan Circle\n",
      "Kenwood Cir => Kenwood Circle\n",
      "Judge Fran Jamieson Way => Judge Fran Jamieson Way\n",
      "Olympic Way => Olympic Way\n",
      "Savannah Way => Savannah Way\n",
      "Medico Way => Medico Way\n",
      "Woodbridge Way => Woodbridge Way\n",
      "Augusta Way => Augusta Way\n",
      "Charlie Corbeil Way => Charlie Corbeil Way\n",
      "Good Seasons Way => Good Seasons Way\n",
      "Winter Way => Winter Way\n",
      "Muirfield Way => Muirfield Way\n",
      "Autumn Way => Autumn Way\n",
      "Spinnaker Way => Spinnaker Way\n",
      "Veterans Way => Veterans Way\n",
      "Briarwood Way => Briarwood Way\n",
      "Sloop Pl => Sloop Place\n",
      "Leeward Pl => Leeward Place\n",
      "Psychology Pl => Psychology Place\n",
      "Ping Pl => Ping Place\n",
      "Brookwood Pl => Brookwood Place\n",
      "Windover Ct => Windover Court\n",
      "Windsor Ct => Windsor Court\n",
      "W Azalea Ct => W Azalea Court\n",
      "Westview Ct => Westview Court\n",
      "Webster Ct => Webster Court\n",
      "Wycliff Ct => Wycliff Court\n",
      "Wedge Ct => Wedge Court\n",
      "Westfield Ct => Westfield Court\n",
      "Quayside Ct => Quayside Court\n",
      "Enterprise Ct => Enterprise Court\n",
      "E Azalea Ct => E Azalea Court\n",
      "Ellen Ct => Ellen Court\n",
      "Mimosa Ct => Mimosa Court\n",
      "Wentworth Ct => Wentworth Court\n",
      "Westwind Ct => Westwind Court\n",
      "W NASA Blvd => W NASA Boulevard\n",
      "Caribbean Isle Blvd => Caribbean Isle Boulevard\n",
      "N Harbor City Blvd => N Harbor City Boulevard\n",
      "Hampton Greens Blvd => Hampton Greens Boulevard\n",
      "E Eau Gallie Blvd => E Eau Gallie Boulevard\n",
      "Lake Crest Blvd => Lake Crest Boulevard\n",
      "W Eau Gallie Blvd => W Eau Gallie Boulevard\n",
      "North Harbor City Blvd => North Harbor City Boulevard\n",
      "Jamaica Blvd => Jamaica Boulevard\n",
      "Admiralty Blvd => Admiralty Boulevard\n",
      "S Fiske Blvd => S Fiske Boulevard\n",
      "Viera Blvd => Viera Boulevard\n",
      "Port Malabar Blvd => Port Malabar Boulevard\n",
      "Spring Branch Trl => Spring Branch Trl\n",
      "Woodwind Trl => Woodwind Trl\n",
      "E Avenue D => E Avenue D\n",
      "N Babcock St => N Babcock Street\n",
      "September St => September Street\n",
      "Solstice St => Solstice Street\n",
      "Murrell Rd Ste 101 => Murrell Rd Ste 101\n",
      "Lewis St. => Lewis Street\n",
      "Highway A1A => Highway A1A\n",
      "N Hwy A1A => N Hwy A1A\n",
      "North State Route A1A => North State Route A1A\n",
      "S Hwy A1A => S Hwy A1A\n",
      "N Highway A1A => N Highway A1A\n",
      "FL A1A => FL A1A\n",
      "2055 Highway A1A => 2055 Highway A1A\n",
      "S Harbor City Blvd #328 => S Harbor City Blvd #328\n",
      "Abalone Road Northwest => Abalone Road Northwest\n",
      "Parrsboro Street Northwest => Parrsboro Street Northwest\n",
      "Del Mundo Street Northwest => Del Mundo Street Northwest\n",
      "Emerson Drive Northwest => Emerson Drive Northwest\n",
      "Rawdon Street Northwest => Rawdon Street Northwest\n",
      "Minton Road Northwest => Minton Road Northwest\n",
      "Beacon Street Northwest => Beacon Street Northwest\n",
      "Championship Circle Northwest => Championship Circle Northwest\n",
      "Highway => Highway\n",
      "Dixie Highway => Dixie Highway\n",
      "Old Dixie Highway => Old Dixie Highway\n",
      " Malabar Rd SE, Suite 102 =>  Malabar Rd SE, Suite 102\n",
      "Robert J Conlan Blvd NE => Robert J Conlan Blvd NE\n",
      "Tomahawk Dr. M-52 => Tomahawk Dr. M-52\n",
      "Malabar Road Southwest => Malabar Road Southwest\n",
      "Penisula Circle => Penisula Circle\n",
      "Lancha Circle => Lancha Circle\n",
      "Skyway Circle => Skyway Circle\n",
      "Shaw Circle => Shaw Circle\n",
      "Sage Brush Circle => Sage Brush Circle\n",
      "Agora Circle SE => Agora Circle SE\n",
      "Eldron Blvd SE => Eldron Blvd SE\n",
      "US-1 => US-1\n",
      "US 1 => US 1\n",
      "Bayside Lakes BLVD => Bayside Lakes BLVD\n",
      "Malabar Road South West => Malabar Road South West\n",
      "Malabar => Malabar\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Your task in this exercise has two steps:\n",
    "\n",
    "- audit the OSMFILE and change the variable 'mapping' to reflect the changes needed to fix \n",
    "    the unexpected street types to the appropriate ones in the expected list.\n",
    "    You have to add mappings only for the actual problems you find in this OSMFILE,\n",
    "    not a generalized solution, since that may and will depend on the particular area you are auditing.\n",
    "- write the update_name function, to actually fix the street name.\n",
    "    The function takes a string with street name as an argument and should return the fixed name\n",
    "    We have provided a simple test so that you see what exactly is expected \"\"\"\n",
    "#https://classroom.udacity.com/nanodegrees/nd002-wgu/parts/fa83382c-7342-40a3-aa96-d66f213215d4/modules/5760d578-d3e3-4951-b75d-744b4e6fe923/lessons/3deb3102-0ba1-4684-b4b1-3af4b2e8c533/concepts/54446302850923\n",
    "import xml.etree.cElementTree as ET\n",
    "from collections import defaultdict\n",
    "import re\n",
    "import pprint\n",
    "\n",
    "inputfile = 'sample.xml'\n",
    "street_type_re = re.compile(r'\\b\\S+\\.?$', re.IGNORECASE)\n",
    "\n",
    "\n",
    "expected = [\"Street\", \"Avenue\", \"Boulevard\", \"Drive\", \"Court\", \"Place\", \"Square\", \"Lane\", \"Road\", \n",
    "            \"Trail\", \"Parkway\", \"Commons\"]\n",
    "\n",
    "# UPDATE THIS VARIABLE\n",
    "mapping = { \"St\": \"Street\",\n",
    "            \"St.\": \"Street\",\n",
    "            \"Ave\": \"Avenue\",\n",
    "            \"Rd\": \"Road\", \n",
    "            \"N.\": \"North\", \n",
    "            \"Ave.\": \"Avenue\", \n",
    "            \"Blvd.\": \"Boulevard\", \n",
    "            \"Blvd\": \"Boulevard\",\n",
    "            \"Ln\": \"Lane\", \n",
    "            \"N\": \"North\",            \n",
    "            \"Dr\": \"Drive\",\n",
    "            \"Cir\": \"Circle\",\n",
    "            \"Ct\": \"Court\",\n",
    "            \"Pl\":\"Place\"}\n",
    "\n",
    "\n",
    "def audit_street_type(street_types, street_name):\n",
    "    m = street_type_re.search(street_name)\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "        if street_type not in expected:\n",
    "            street_types[street_type].add(street_name)\n",
    "\n",
    "\n",
    "def is_street_name(elem):\n",
    "    return (elem.attrib['k'] == \"addr:street\")\n",
    "\n",
    "\n",
    "def audit(inputfile):\n",
    "    inputfile = open(inputfile, \"r\")\n",
    "    street_types = defaultdict(set)\n",
    "    for event, elem in ET.iterparse(inputfile, events=(\"start\",)):\n",
    "\n",
    "        if elem.tag == \"node\" or elem.tag == \"way\":\n",
    "            for tag in elem.iter(\"tag\"):\n",
    "                if is_street_name(tag):\n",
    "                    audit_street_type(street_types, tag.attrib['v'])\n",
    "    inputfile.close()\n",
    "    return street_types\n",
    "\n",
    "\n",
    "#pprint.pprint(dict(street_types))\n",
    "\n",
    "\n",
    "def update_name(name, mapping):\n",
    "    m = street_type_re.search(name)\n",
    "    street_type = m.group()\n",
    "    if street_type not in expected: \n",
    "        if street_type in mapping.keys():  \n",
    "            new_street_type = mapping[street_type]\n",
    "            name = name.replace(street_type, new_street_type)\n",
    "\n",
    "    return name\n",
    "street_types = audit(inputfile)\n",
    "\n",
    "for street_type, ways in street_types.items():  \n",
    "    for name in ways:\n",
    "        better_name = update_name(name, mapping)\n",
    "        print(name, \"=>\", better_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Your task is to wrangle the data and transform the shape of the data\n",
    "into the model we mentioned earlier. The output should be a list of dictionaries\n",
    "that look like this:\n",
    "\n",
    "{\n",
    "\"id\": \"2406124091\",\n",
    "\"type: \"node\",\n",
    "\"visible\":\"true\",\n",
    "\"created\": {\n",
    "          \"version\":\"2\",\n",
    "          \"changeset\":\"17206049\",\n",
    "          \"timestamp\":\"2013-08-03T16:43:42Z\",\n",
    "          \"user\":\"linuxUser16\",\n",
    "          \"uid\":\"1219059\"\n",
    "        },\n",
    "\"pos\": [41.9757030, -87.6921867],\n",
    "\"address\": {\n",
    "          \"housenumber\": \"5157\",\n",
    "          \"postcode\": \"60625\",\n",
    "          \"street\": \"North Lincoln Ave\"\n",
    "        },\n",
    "\"amenity\": \"restaurant\",\n",
    "\"cuisine\": \"mexican\",\n",
    "\"name\": \"La Cabana De Don Luis\",\n",
    "\"phone\": \"1 (773)-271-5176\"\n",
    "}\n",
    "\n",
    "You have to complete the function 'shape_element'.\n",
    "We have provided a function that will parse the map file, and call the function with the element\n",
    "as an argument. You should return a dictionary, containing the shaped data for that element.\n",
    "We have also provided a way to save the data in a file, so that you could use\n",
    "mongoimport later on to import the shaped data into MongoDB. \n",
    "\n",
    "Note that in this exercise we do not use the 'update street name' procedures\n",
    "you worked on in the previous exercise. If you are using this code in your final\n",
    "project, you are strongly encouraged to use the code from previous exercise to \n",
    "update the street names before you save them to JSON. \n",
    "\n",
    "In particular the following things should be done:\n",
    "- you should process only 2 types of top level tags: \"node\" and \"way\"\n",
    "- all attributes of \"node\" and \"way\" should be turned into regular key/value pairs, except:\n",
    "    - attributes in the CREATED array should be added under a key \"created\"\n",
    "    - attributes for latitude and longitude should be added to a \"pos\" array,\n",
    "      for use in geospacial indexing. Make sure the values inside \"pos\" array are floats\n",
    "      and not strings. \n",
    "- if the second level tag \"k\" value contains problematic characters, it should be ignored\n",
    "- if the second level tag \"k\" value starts with \"addr:\", it should be added to a dictionary \"address\"\n",
    "- if the second level tag \"k\" value does not start with \"addr:\", but contains \":\", you can\n",
    "  process it in a way that you feel is best. For example, you might split it into a two-level\n",
    "  dictionary like with \"addr:\", or otherwise convert the \":\" to create a valid key.\n",
    "- if there is a second \":\" that separates the type/direction of a street,\n",
    "  the tag should be ignored, for example:\n",
    "\n",
    "<tag k=\"addr:housenumber\" v=\"5158\"/>\n",
    "<tag k=\"addr:street\" v=\"North Lincoln Avenue\"/>\n",
    "<tag k=\"addr:street:name\" v=\"Lincoln\"/>\n",
    "<tag k=\"addr:street:prefix\" v=\"North\"/>\n",
    "<tag k=\"addr:street:type\" v=\"Avenue\"/>\n",
    "<tag k=\"amenity\" v=\"pharmacy\"/>\n",
    "\n",
    "  should be turned into:\n",
    "\n",
    "{...\n",
    "\"address\": {\n",
    "    \"housenumber\": 5158,\n",
    "    \"street\": \"North Lincoln Avenue\"\n",
    "}\n",
    "\"amenity\": \"pharmacy\",\n",
    "...\n",
    "}\n",
    "\n",
    "- for \"way\" specifically:\n",
    "\n",
    "  <nd ref=\"305896090\"/>\n",
    "  <nd ref=\"1719825889\"/>\n",
    "\n",
    "should be turned into\n",
    "\"node_refs\": [\"305896090\", \"1719825889\"]\n",
    "\"\"\"\n",
    "\n",
    "from datetime import datetime\n",
    "import json  \n",
    "from bson import json_util\n",
    "\n",
    "CREATED = [\"version\", \"changeset\", \"timestamp\", \"user\", \"uid\"]\n",
    "\n",
    "def shape_element(element):  \n",
    "    node = {}\n",
    "    if element.tag == \"node\" or element.tag == \"way\" :\n",
    "        node['type'] = element.tag\n",
    "\n",
    "        \n",
    "        for attrib in element.attrib:\n",
    "\n",
    "            \n",
    "            if attrib in CREATED:\n",
    "                if 'created' not in node:\n",
    "                    node['created'] = {}\n",
    "                if attrib == 'timestamp':\n",
    "                    node['created'][attrib] = datetime.strptime(element.attrib[attrib], '%Y-%m-%dT%H:%M:%SZ')\n",
    "                else:\n",
    "                    node['created'][attrib] = element.get(attrib)\n",
    "\n",
    "            \n",
    "            if attrib in ['lat', 'lon']:\n",
    "                lat = float(element.attrib.get('lat'))\n",
    "                lon = float(element.attrib.get('lon'))\n",
    "                node['pos'] = [lat, lon]\n",
    "\n",
    "            \n",
    "            else:\n",
    "                node[attrib] = element.attrib.get(attrib)\n",
    "\n",
    "        \n",
    "        for tag in element.iter('tag'):\n",
    "            key   = tag.attrib['k']\n",
    "            value = tag.attrib['v']\n",
    "            if not prob_chars.search(key):\n",
    "\n",
    "                \n",
    "                if lower_colon.search(key) and key.find('addr') == 0:\n",
    "                    if 'address' not in node:\n",
    "                        node['address'] = {}\n",
    "                    sub_attr = key.split(':')[1]\n",
    "                    if is_street_name(tag):\n",
    "                        # Do some cleaning\n",
    "                        better_name = update_name(name, mapping)\n",
    "                        node['address'][sub_attr] = better_name\n",
    "                    else:\n",
    "                        node['address'][sub_attr] = value\n",
    "\n",
    "                \n",
    "                elif not key.find('addr') == 0:\n",
    "                    if key not in node:\n",
    "                        node[key] = value\n",
    "                else:\n",
    "                    node[\"tag:\" + key] = value\n",
    "\n",
    "        \n",
    "        for nd in element.iter('nd'):\n",
    "            if 'node_refs' not in node:\n",
    "                node['node_refs'] = []\n",
    "            node['node_refs'].append(nd.attrib['ref'])\n",
    "\n",
    "        return node\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "\n",
    "def process_map(inputfile, pretty = False):  \n",
    "    file_out = \"{0}.json\".format(inputfile)\n",
    "    with open(file_out, \"w\") as fo:\n",
    "        for _, element in ET.iterparse(inputfile):\n",
    "            el = shape_element(element)\n",
    "            if el:\n",
    "                if pretty:\n",
    "                    fo.write(json.dumps(el, indent=2, default=json_util.default)+\"\\n\")\n",
    "                else:\n",
    "                    fo.write(json.dumps(el, default=json_util.default) + \"\\n\")\n",
    "                    \n",
    "\n",
    "process_map(inputfile)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The downloaded file is 123.241036 MB\n"
     ]
    }
   ],
   "source": [
    "import os  \n",
    "print('The downloaded file is {} MB'.format(os.path.getsize(inputfile)/1.0e6)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The json file is 211.020552 MB\n"
     ]
    }
   ],
   "source": [
    "print('The json file is {} MB'.format(os.path.getsize(inputfile + \".json\")/1.0e6))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
